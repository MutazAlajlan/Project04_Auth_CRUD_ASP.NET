// <auto-generated />
using System;
using ConferenceRoomManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConferenceRoomManager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210616115242_AddUserNameToBookingsTable")]
    partial class AddUserNameToBookingsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConferenceRoomManager.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.BookingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.BuildingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Houses The Hartley Library, IT Soultions, Study rooms, and many Facilities",
                            Image = "https://www.southampton.ac.uk/sites/default/files/styles/banner_medium/public/2020-06/aerial-view-highfield-sunny-day.jpg?h=2e5cdddf&itok=0yzClUVO",
                            Location = "https://www.google.com/maps/embed/v1/place?q=place_id:ChIJW_B-i_ZzdEgR6xjnALzwrgY&key=AIzaSyBWPgMGItsQRc2AQdFXfIgQs_QmV0tiCvk",
                            Name = "B12"
                        },
                        new
                        {
                            Id = 2,
                            Description = "New Mountbatten contains the following: School of Electronics & Computer Science. Physical Sciences and Engineering. Optoelectronics Research Centre. Comms, Signal Processing & Control ORC. Research ORC & Enterprise. Technical Support Staff. NANO. Electronic & Software Systems",
                            Image = "https://www.zeplerinstitute.com/sites/www.zeplerinstitute.ac.uk/files/zepler_exterior_2_0.jpg",
                            Location = "https://www.google.com/maps/embed/v1/place?q=place_id:ChIJW_jlkvVzdEgRP4M0dE0Zozo&key=AIzaSyBWPgMGItsQRc2AQdFXfIgQs_QmV0tiCvk",
                            Name = "B53"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The Centenary Building also has an 80-seat Harvard lecture theatre, numerous private pod study spaces, bookable seminar rooms and large flat floored teaching spaces.",
                            Image = "https://pbs.twimg.com/media/EUV6_ypWkAAzhl4.jpg",
                            Location = "https://www.google.com/maps/embed/v1/place?q=place_id:ChIJhbfAkaBzdEgRii3AIRj1Qp4&key=AIzaSyBWPgMGItsQRc2AQdFXfIgQs_QmV0tiCvk",
                            Name = "B100"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Home to our engineering and maritime engineering courses and has a number of world-class testing and research laboratories.",
                            Image = "https://www.bof.co.uk/assets/images/projects/University-of-Southampton-B178-Boldrewood/boldrewood-small-1.png",
                            Location = "https://www.google.com/maps/embed/v1/place?q=place_id:ChIJe-3X6vVzdEgR9urRdV4flj4&key=AIzaSyBWPgMGItsQRc2AQdFXfIgQs_QmV0tiCvk",
                            Name = "B178"
                        });
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.FacilityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Green Bar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Starbucks"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Costa coffee"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pret a Manger"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Highfield Pharmacy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Terrace Restaurant"
                        });
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.RoomModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingId = 1,
                            Capacity = 1,
                            Description = "Personal study space.",
                            FacilityId = 3,
                            Image = "https://www.southampton.ac.uk/sites/default/files/styles/block_card_image_small/public/2020-07/students-studying-pods_0.jpg",
                            Name = "Study"
                        },
                        new
                        {
                            Id = 2,
                            BuildingId = 2,
                            Capacity = 76,
                            Description = "Large rooms.",
                            FacilityId = 1,
                            Image = "https://lh3.googleusercontent.com/proxy/m5EIKPse4yZo71SAdNQhr-MsQeRIHCVr506uQxCvMFIeFsUtBNeDAcgT0uvrda0gUj7Rfa84CkzjT6-zStm1WoWnh0TZvoJ_RisgnPH7lPI8zJQzZgIEcAHdlzJxESxwHP2QGjjBkJ8UAsHPU4ULHTVnwFkSHdsL7diXAsKNm0nZt_iGmDTlws2ZhuBQsu9rjOFUfynooXUaQIx1xPQ4_6L5hbKcP572ePFfW5qXjr29Pz606Q",
                            Name = "Lab"
                        },
                        new
                        {
                            Id = 3,
                            BuildingId = 3,
                            Capacity = 100,
                            Description = "Large study rooms.",
                            FacilityId = 2,
                            Image = "https://cdn.southampton.ac.uk/assets/imported/transforms/site/slideshow/Media_Img/BC294B5E657C498A82D61D1F7AACD905/Study%20space%20and%20views.jpg_SIA_JPG_fit_to_width_XL.jpg",
                            Name = "Study"
                        },
                        new
                        {
                            Id = 4,
                            BuildingId = 2,
                            Capacity = 150,
                            Description = "Large lab and advanced equipments.",
                            FacilityId = 4,
                            Image = "https://www.tlc-business.co.uk/wp-content/uploads/2017/03/IMG_20170310_103343-1.jpg",
                            Name = "Lab"
                        },
                        new
                        {
                            Id = 5,
                            BuildingId = 4,
                            Capacity = 50,
                            Description = "Advanced lab equipments.",
                            FacilityId = 5,
                            Image = "https://www.ecs.soton.ac.uk/sites/www.ecs.soton.ac.uk/files/University%20of%20Southampton%20STEM_IMG_9039_900x500.jpg",
                            Name = "Lab"
                        },
                        new
                        {
                            Id = 6,
                            BuildingId = 3,
                            Capacity = 100,
                            Description = "Large study rooms.",
                            FacilityId = 6,
                            Image = "https://www.bof.co.uk/assets/images/projects/University-of-Southampton-B178-Boldrewood/boldrewood-small-3.png",
                            Name = "Study"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.BookingModel", b =>
                {
                    b.HasOne("ConferenceRoomManager.Models.RoomModel", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomManager.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.RoomModel", b =>
                {
                    b.HasOne("ConferenceRoomManager.Models.BuildingModel", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomManager.Models.FacilityModel", "Facility")
                        .WithMany("Rooms")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConferenceRoomManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConferenceRoomManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConferenceRoomManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.BuildingModel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.FacilityModel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ConferenceRoomManager.Models.RoomModel", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
